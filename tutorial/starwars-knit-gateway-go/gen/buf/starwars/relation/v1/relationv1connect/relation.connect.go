// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: buf/starwars/relation/v1/relation.proto

package relationv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/bufbuild/knit/tutorial/starwars-knit-gateway-go/gen/buf/starwars/relation/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion1_7_0

const (
	// RelationServiceName is the fully-qualified name of the RelationService service.
	RelationServiceName = "buf.starwars.relation.v1.RelationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RelationServiceGetFilmStarshipsProcedure is the fully-qualified name of the RelationService's
	// GetFilmStarships RPC.
	RelationServiceGetFilmStarshipsProcedure = "/buf.starwars.relation.v1.RelationService/GetFilmStarships"
)

// RelationServiceClient is a client for the buf.starwars.relation.v1.RelationService service.
type RelationServiceClient interface {
	GetFilmStarships(context.Context, *connect_go.Request[v1.GetFilmStarshipsRequest]) (*connect_go.Response[v1.GetFilmStarshipsResponse], error)
}

// NewRelationServiceClient constructs a client for the buf.starwars.relation.v1.RelationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRelationServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RelationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &relationServiceClient{
		getFilmStarships: connect_go.NewClient[v1.GetFilmStarshipsRequest, v1.GetFilmStarshipsResponse](
			httpClient,
			baseURL+RelationServiceGetFilmStarshipsProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
	}
}

// relationServiceClient implements RelationServiceClient.
type relationServiceClient struct {
	getFilmStarships *connect_go.Client[v1.GetFilmStarshipsRequest, v1.GetFilmStarshipsResponse]
}

// GetFilmStarships calls buf.starwars.relation.v1.RelationService.GetFilmStarships.
func (c *relationServiceClient) GetFilmStarships(ctx context.Context, req *connect_go.Request[v1.GetFilmStarshipsRequest]) (*connect_go.Response[v1.GetFilmStarshipsResponse], error) {
	return c.getFilmStarships.CallUnary(ctx, req)
}

// RelationServiceHandler is an implementation of the buf.starwars.relation.v1.RelationService
// service.
type RelationServiceHandler interface {
	GetFilmStarships(context.Context, *connect_go.Request[v1.GetFilmStarshipsRequest]) (*connect_go.Response[v1.GetFilmStarshipsResponse], error)
}

// NewRelationServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRelationServiceHandler(svc RelationServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(RelationServiceGetFilmStarshipsProcedure, connect_go.NewUnaryHandler(
		RelationServiceGetFilmStarshipsProcedure,
		svc.GetFilmStarships,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	))
	return "/buf.starwars.relation.v1.RelationService/", mux
}

// UnimplementedRelationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRelationServiceHandler struct{}

func (UnimplementedRelationServiceHandler) GetFilmStarships(context.Context, *connect_go.Request[v1.GetFilmStarshipsRequest]) (*connect_go.Response[v1.GetFilmStarshipsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.starwars.relation.v1.RelationService.GetFilmStarships is not implemented"))
}
