// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file buf/starwars/quote/v1/quote.proto (package buf.starwars.quote.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message buf.starwars.quote.v1.Quote
 */
export class Quote extends Message<Quote> {
  /**
   * @generated from field: string quote_id = 1;
   */
  quoteId = "";

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  /**
   * @generated from field: string person_id = 3;
   */
  personId = "";

  /**
   * @generated from field: string film_id = 4;
   */
  filmId = "";

  constructor(data?: PartialMessage<Quote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.starwars.quote.v1.Quote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quote_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "person_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "film_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Quote {
    return new Quote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Quote {
    return new Quote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Quote {
    return new Quote().fromJsonString(jsonString, options);
  }

  static equals(a: Quote | PlainMessage<Quote> | undefined, b: Quote | PlainMessage<Quote> | undefined): boolean {
    return proto3.util.equals(Quote, a, b);
  }
}

/**
 * @generated from message buf.starwars.quote.v1.StreamQuotesRequest
 */
export class StreamQuotesRequest extends Message<StreamQuotesRequest> {
  /**
   * @generated from field: uint64 limit = 1;
   */
  limit = protoInt64.zero;

  constructor(data?: PartialMessage<StreamQuotesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.starwars.quote.v1.StreamQuotesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamQuotesRequest {
    return new StreamQuotesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamQuotesRequest {
    return new StreamQuotesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamQuotesRequest {
    return new StreamQuotesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamQuotesRequest | PlainMessage<StreamQuotesRequest> | undefined, b: StreamQuotesRequest | PlainMessage<StreamQuotesRequest> | undefined): boolean {
    return proto3.util.equals(StreamQuotesRequest, a, b);
  }
}

/**
 * @generated from message buf.starwars.quote.v1.StreamQuotesResponse
 */
export class StreamQuotesResponse extends Message<StreamQuotesResponse> {
  /**
   * @generated from field: buf.starwars.quote.v1.Quote quote = 1;
   */
  quote?: Quote;

  constructor(data?: PartialMessage<StreamQuotesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.starwars.quote.v1.StreamQuotesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quote", kind: "message", T: Quote },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamQuotesResponse {
    return new StreamQuotesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamQuotesResponse {
    return new StreamQuotesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamQuotesResponse {
    return new StreamQuotesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamQuotesResponse | PlainMessage<StreamQuotesResponse> | undefined, b: StreamQuotesResponse | PlainMessage<StreamQuotesResponse> | undefined): boolean {
    return proto3.util.equals(StreamQuotesResponse, a, b);
  }
}

